Rozmowa rekrutacyjna Java Developer

1. Algorytmy sortujące. bąbelkowy, przez wstawianie, przez scalanie.
2. Klasy złożoności obliczeniowej.
3. Referencje do obiektów. - W wielu obiektowych językach wysokiego poziomu (np. Java) programista nie może samodzielnie zarządzać pamięcią. Sposób jej organizacji zależy od implementacji konkretnej maszyny wirtualnej. Wyróżniony jest w niej obszar zwany stertą, w której przechowywane są wszystkie utworzone przez aplikację obiekty. Zmienne obiektowe nie przechowują bezpośrednio obiektów, a jedynie referencje do sterty. Przypisując wartość jednej zmiennej obiektowej do drugiej, lub przekazując ją przez wartość, przekazujemy jedynie referencję, co oznacza, że od tego momentu obie zmienne będą odnosić się do tego samego obiektu, a zmiany stanu wprowadzone za pośrednictwem jednej z nich będą natychmiast widoczne przez drugą. Dodatkowo, dopuszcza się istnienie pustych referencji (null), które aktualnie nie wskazują na żaden obiekt.
4. Odśmiecanie pamięci. Referencje mają kluczowe znaczenie dla algorytmów odśmiecania pamięci. Umożliwiają śledzenie, które obiekty i wartości są wciąż używane przez program, a które mogą być bezpiecznie usunięte. Najprostszą techniką kontroli czasu życia danych na stercie jest zliczanie referencji[2]. Aplikacja utrzymuje specjalny licznik dla każdego obiektu, który przechowuje informacje o liczbie referencji aktualnie na niego wskazujących. Jeśli spadnie on do zera, oznacza to, że nie jest już używany, a przydzielona mu pamięć powinna być zwolniona. Technika ta nie potrafi jednak wykrywać cykli (obiekty A i B posiadają referencje do siebie nawzajem, lecz reszta programu już nie).
5. Dlaczego nie używa się static? Wykorzystanie singletonów. Static w pamięci.
6. Mutable Objects: When you have a reference to an instance of an object, the contents of that instance can be altered Immutable Objects: When you have a reference to an instance of an object, the contents of that instance cannot be altered
7. == sprawdzenie czy jest to ten sam objekt, czy zmienna ma taką samą referencję do obiektu.
8. equals - sprawdzenie czy obiekty są te same
   - zwrotna
   - symetryczna
   - przechodnia
9. hashcode - Przy założeniu, że obiekt się w międzyczasie nie zmienia, każdorazowe wywołanie funkcji hashCode() musi zwracać, w ramach pojedynczego uruchomienia aplikacji, taką samą wartość.
   - Jeśli dwa obiekty ‘x’ i ‘y’ są „takie same”, tj. ‘x.equals(y)’ ma wartość ‘true’, to muszą one mieć takie same wartości skrótu (ang. hash code), tj. musi zachodzić ‘x.hashCode() == y.hashCode()’
   - jeśli obiekty „są różne” (tj. nie są „takie same”), to ich wartości skrótu wcale nie muszą być różne.
10. overloading - 
    - public void draw(String s);
    - public void draw(int i);
    - public void draw(double f);
    - public void draw(int i, double f);
11. overriding - in sub classes 
12. Collection.
    - czy Map należy do Collection?
    - implementacje interfejsu Map (4) 
    - różnica ArrayList vs. LinkedList
    - 
13. TDD
14. public, private, protected (subclass), "package" no modifier
15. transient - non serializable field
16. final
    - A final variable can only be initialized once, either via an initializer or an assignment statement.
    - class, method - can not be overridden
17. static block... - what is, memory access of static block, ect.
18. Kompozycja ponad dziedziczenie - http://en.wikipedia.org/wiki/Composition_over_inheritance
19. sql - funkcje agregujące 
    - AVG - Średnia z wartości w wyrażeniu numerycznym 
    - COUNT - Liczba wartości w wyrażeniu 
    - COUNT(*) - Liczba zaznaczonych wierszy 
    - MAX - Największa wartość w wyrażeniu 
    - MIN - Najmniejsza wartość w wyrażeniu 
    - SUM - Suma wartości w wyrażeniu numerycznym 
    - STDEV - Odchylenie statystyczne dla wszystkich wartości 
    - STDEVP - Odchylenie statystyczne dla populacji 
    - VAR - Wariancja statyczna dla wszystkich wartości 
    - VARP - Wariacja statyczna dla wszystkich wartości w populacji 
20. Checked versus unchecked exceptions - http://www.javapractices.com/topic/TopicAction.do?Id=129
21. Error - An Error is a subclass of Throwable that indicates serious problems that a reasonable application should not try to catch. - http://docs.oracle.com/javase/1.4.2/docs/api/java/lang/Error.html
22. Javascript - == vs. === - http://www.w3schools.com/js/js_comparisons.asp
23. 
